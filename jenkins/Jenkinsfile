pipeline{
    agent any
    environment{
        registry="vikasharya000/worker" 
        dockerImage=""  
        dockertoken=credentials("docker-token")
    }
    stages{
        stage('Build docker image') { 
            steps { 
                script { 
                    dockerImage = docker.build registry 
                }
            } 
        }
        stage('Push docekr image') { 
            steps { 
                script { 
                    docker.withRegistry( '', "dockerhub-creds" ) { 
                        dockerImage.push("${BUILD_NUMBER}") 
                    }
                } 
            }
        }
        stage('Scan docekr image') { 
            steps { 
                script { 
                    sh """
                    touch docker_image_scan.txt
                    trivy image ${dockerImage}:${BUILD_NUMBER} > docker_image_scan.txt
                    """
                } 
            }
        }
        stage('Package helm chart and push') {
            steps{
                script{
                    sh """
                    cp ./chart/worker/Chart.yaml chart.yaml.tmp && sed "/^\\([[:space:]]*version: \\).*/s//\\10.\${BUILD_NUMBER}.0/" < chart.yaml.tmp >./chart/worker/Chart.yaml && rm -f chart.yaml.tmp
                    cp ./chart/worker/values.yaml values.yaml.tmp && sed 's/vikasharya000\\/worker/vikasharya000\\/worker:${BUILD_NUMBER}/g' < values.yaml.tmp >./chart/worker/values.yaml && rm -f values.yaml.tmp
                    echo \${dockertoken} | helm registry login registry-1.docker.io -u vikasharya000 --password-stdin
                    helm package ./chart/worker/
                    helm push helm_worker-0.\${BUILD_NUMBER}.0.tgz oci://registry-1.docker.io/vikasharya000
                    """
                }
                build job: "voting-app-chart", wait: true,parameters: [
                string(name: 'workerChartVersion', value: "0.${BUILD_NUMBER}.0")
                ]
            }
        }
    }
}